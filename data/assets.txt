App.js before using the data context providers

Dear Bhawana, 
From the delicate little heart of mine I want to express the deep level of love and affection I have for you I am so much head over heels in love with you I love you from the bottom of my heart I really do.
suna na there are many things to say to you I am so much in love with your everything  I am not saying these things just cause you are crying yrr. this is not out of sympathy I just wanted to say something more to you Something more and more something I can't say it by my voice. Something I am unable to express I am too much logical type of person but you are emotional and that whats make me fall for you more and more I really love you from the bottom of my heart

import Layout from "./Layout"
import Home from "./Home"
import NewPost from "./NewPost"
import PostPage from "./PostPage"
import About from "./About"
import Missing from "./Missing"
import { Route, Routes } from "react-router-dom";
import { DataProvider } from "./context/DataContext"
function App() {
  const [search, setSearch] = useState('');
  const [posts, setPosts] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('')
  const [postBody, setPostBody] = useState('')
  const [editTitle, setEditTitle] = useState('')
  const [editBody, setEditBody] = useState('')
  const navigate = useNavigate()
  const {width} = useWindowSize();
  // this line replaces the bewlo use effect
  const {data, fetchError, isLoading} = useAxiosFetch('http://localhost:3500/posts');
  useEffect(()=>{
    setPosts(data);
  },[data])

  /*
  useEffect(()=>{
    const fetchPosts = async  () =>{
      try {
        // fetching the data with axios is better than fetching with fetch() beacuse we don't need to check for 
        // error as in fetch with if (!response.ok) and we don't even have to get the json it automatically creates json we don't have to do data = response.json()
        const response = await api.get('/posts');
        console.log(response)
        setPosts(response.data);
      } catch (error) {
        // Not in the 200 response range there are various responses from the axios documentation
        if(error.response){
          // thiscode will run if we get some resposne from the backend but not in the range of 200 
          console.log(error.response.data);
          console.log(error.response.status);
          console.log(error.response.headers);
        }else{
          // this code will run if we don't get any response from the backend at all
          console.log(`Error : ${error.message}`);
        }
      }
    }
    fetchPosts()
  },[])
  */

  useEffect(() => {
    const filteredResults = posts.filter(post =>
      ((post.body).toLowerCase()).includes(search.toLowerCase()) ||
      ((post.title).toLowerCase()).includes(search.toLowerCase())
    );
    setSearchResults(filteredResults.reverse());

    

  }, [posts, search])

  const handleEdit = async (id) =>{
    const dateTime = format(new Date(), "MMMM dd, yyyy pp");
    const updatedPost = { id, title: editTitle, dateTime, body: editBody };
    try {
      const response = await api.put(`/posts/${id}`, updatedPost);
      setPosts(posts.map(post => post.id === id? {...response.data}: post));
      setEditTitle('');
      setEditBody('');
      navigate('/');
    } catch (error) {
      console.log(`Error: ${error.message}`);
    }
  }

  const handleDelete = async  (id) => {
    try {
      await api.delete(`/posts/${id}`)
      const postList = posts.filter(post => post.id !== id);
      setPosts(postList);
      navigate('/')
    } catch (error) {
      console.log(`Error: ${error.message}`)
      
    }
  }
  const handleSubmit = async (e) => {
    e.preventDefault();
    const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
    const dateTime = format(new Date(), "MMMM dd, yyyy pp");
    const newPost = { id, title: postTitle, dateTime, body: postBody };
    try {
      const response = await api.post('/posts', newPost)
      const allPosts = [...posts, response.data];
      setPosts(allPosts);
      setPostTitle('');
      setPostBody('')
      navigate('/');
    } catch (error) {
      console.log(`Error: ${error.message}`)
    }
    
  }
  return (
  <>
  <DataProvider>
    <Routes>
      <Route path="/" element={<Layout/>}>
        <Route index element={<Home/>} />
        <Route path="post">
            <Route index element={<NewPost/>} />
            <Route path="/post/:id" element={<PostPage/>} />
        </Route>
        <Route path="/edit/:id" element={<EditPost />} />
        <Route path="about" element={<About />} />
        <Route path="*" element={<Missing />} />
      </Route>
    </Routes >
  </DataProvider>
  </>
  );
}

export default App;
